obj-y += translate.o op_helper.o cpu_helper.o cpu.o csr.o fpu_helper.o gdbstub.o
obj-$(CONFIG_SOFTMMU) += pmp.o
obj-$(TARGET_CHERI) += op_helper_cheri.o
obj-$(CONFIG_TCG_LOG_INSTR) += op_helper_log_instr.o

ifeq ($(CONFIG_SOFTMMU),y)
obj-y += monitor.o
endif

DECODETREE = $(SRC_PATH)/scripts/decodetree.py

decode32-y = $(SRC_PATH)/target/riscv/insn32.decode
decode32-$(TARGET_RISCV64) += $(SRC_PATH)/target/riscv/insn32-64.decode
# TODO: separate TARGET_CHERI variant
decode32-$(TARGET_CHERI) += $(SRC_PATH)/target/riscv/insn32-cheri.decode
ifeq ($(TARGET_CHERI),y)
decode32-$(TARGET_RISCV32) += $(SRC_PATH)/target/riscv/insn32-cheri-32.decode
decode32-$(TARGET_RISCV64) += $(SRC_PATH)/target/riscv/insn32-cheri-64.decode
endif

decode16-y = $(SRC_PATH)/target/riscv/insn16.decode
decode16-$(TARGET_RISCV32) += $(SRC_PATH)/target/riscv/insn16-32.decode
decode16-$(TARGET_RISCV64) += $(SRC_PATH)/target/riscv/insn16-64.decode

target/riscv/decode_insn32.inc.c: $(decode32-y) $(DECODETREE)
	$(call quiet-command, \
	  $(PYTHON) $(DECODETREE) -o $@ --static-decode decode_insn32 \
          $(decode32-y), "GEN", $(TARGET_DIR)$@)

target/riscv/decode_insn16.inc.c: $(decode16-y) $(DECODETREE)
	$(call quiet-command, \
	  $(PYTHON) $(DECODETREE) -o $@ --static-decode decode_insn16 \
          --insnwidth 16 $(decode16-y), "GEN", $(TARGET_DIR)$@)

target/riscv/translate.o: target/riscv/decode_insn32.inc.c \
	target/riscv/decode_insn16.inc.c
