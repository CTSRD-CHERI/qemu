#
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2020 Alex Richardson
# All rights reserved.
#
# This software was developed by SRI International and the University of
# Cambridge Computer Laboratory (Department of Computer Science and
# Technology) under DARPA contract HR0011-18-C-0016 ("ECATS"), as part of the
# DARPA SSITH research programme.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# This is concatenated with insn32-cheri.decode for risc64 targets.
# This file defines the RV64-specific encoding

ld_d_ddc    1111101  00011 ..... 000 ..... 1011011 @r2  # This is lcddc (capability load) for RV32
ld_wu_ddc   1111101  00110 ..... 000 ..... 1011011 @r2  # RV64-only
ld_wu_cap   1111101  01110 ..... 000 ..... 1011011 @r2  # RV64-only
ld_d_cap    1111101  01011 ..... 000 ..... 1011011 @r2  # RV64-only
lr_d_ddc    1111101  10011 ..... 000 ..... 1011011 @atom_ld_cap_or_ddc  # RV64-only (lr_c_ddc for RV32)
lr_c_ddc    1111101  10100 ..... 000 ..... 1011011 @atom_ld_cap_or_ddc  # RV64-only (would be lr_q_ddc for RV128)
ld_c_ddc    1111101  10111 ..... 000 ..... 1011011 @r2  # Would be ld_q_ddc for RV128
lr_d_cap    1111101  11011 ..... 000 ..... 1011011 @atom_ld_cap_or_ddc  # RV64-only (lr_c_cap for RV32)
lr_c_cap    1111101  11100 ..... 000 ..... 1011011 @atom_ld_cap_or_ddc  # RV64-only (would be lr_q_cap for RV128)
ld_c_cap    1111101  11111 ..... 000 ..... 1011011 @r2  # Would be ld_q_cap for RV128

st_d_ddc    1111100  ..... ..... 000 00011 1011011 @r_2source  # This is st_c_ddc (capability store) for RV32
st_c_ddc    1111100  ..... ..... 000 00100 1011011 @r_2source  # Would be st_q_ddc for RV128
st_d_cap    1111100  ..... ..... 000 01011 1011011 @r_2source  # This is st_c_cap (capability store) for RV32
st_c_cap    1111100  ..... ..... 000 01100 1011011 @r_2source  # Would be st_q_cap for RV128
sc_d_ddc    1111100  ..... ..... 000 10011 1011011 @atom_st_cap_or_ddc  # RV64-only (sc_c_ddc for RV32)
sc_d_cap    1111100  ..... ..... 000 11011 1011011 @atom_st_cap_or_ddc  # RV64-only (sc_c_cap for RV32)
sc_c_ddc    1111100  ..... ..... 000 10100 1011011 @atom_st_cap_or_ddc  # RV64-only (would be sc_q_ddc for RV128)
sc_c_cap    1111100  ..... ..... 000 11100 1011011 @atom_st_cap_or_ddc  # RV64-only (would be sc_q_cap for RV128)

lc       ............   ..... 010 ..... 0001111 @i  # def LC_128  : RVInstI<0x2, OPC_MISC_MEM (0b0001111)
sc       ....... .....  ..... 100 ..... 0100011 @s  # def SC_128  : RVInstS<0x4, OPC_STORE (0b0100011)

lr_c        00010 . . 00000 ..... 100 ..... 0101111 @atom_ld
sc_c        00011 . . ..... ..... 100 ..... 0101111 @atom_st
amoswap_c   00001 . . ..... ..... 100 ..... 0101111 @atom_st

ld_wu_u_cap 1111001  01110 ..... 000 ..... 1011011 @r2  # RV64-only
ld_d_u_cap  1111001  01011 ..... 000 ..... 1011011 @r2  # RV64-only
lr_d_u_cap  1111001  11011 ..... 000 ..... 1011011 @atom_ld_cap_or_ddc  # RV64-only (lr_c_cap for RV32)
ld_c_u_cap  1111001  11111 ..... 000 ..... 1011011 @r2  # Would be ld_q_cap for RV128
st_d_u_cap  1111000  ..... ..... 000 01011 1011011 @r_2source  # This is st_c_cap (capability store) for RV32
st_c_u_cap  1111000  ..... ..... 000 01100 1011011 @r_2source  # Would be st_q_cap for RV128
